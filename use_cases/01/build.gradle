buildscript {
    repositories {
        jcenter()
        maven { 
            url "http://sogeo.services/maven/repository/release/" 
        }
    }
	dependencies {
		classpath "ch.interlis:ili2pg:3.9.1"
        classpath "com.amazonaws:aws-java-sdk-s3:1.11.158"
	}
}

import groovy.io.FileType
import ch.ehi.ili2db.base.Ili2db
import ch.ehi.ili2db.base.Ili2dbException
import ch.ehi.ili2db.gui.Config
import ch.ehi.ili2db.mapping.NameMapping
import ch.ehi.sqlgen.generator.SqlConfiguration
import com.amazonaws.ClientConfiguration
import com.amazonaws.services.s3.AmazonS3
import com.amazonaws.services.s3.AmazonS3Client
import com.amazonaws.services.s3.AmazonS3ClientBuilder
import com.amazonaws.services.s3.model.Bucket
import com.amazonaws.services.s3.model.PutObjectRequest
import com.amazonaws.auth.AWSStaticCredentialsProvider
import com.amazonaws.services.s3.model.CannedAccessControlList
import com.amazonaws.regions.Regions

ext {
    setPropertyDefaultValueIfNotCustomized('dbHost', '192.168.50.4')
    setPropertyDefaultValueIfNotCustomized('dbPort', '5432')
    setPropertyDefaultValueIfNotCustomized('dbDatabase', 'xanadu2')
    setPropertyDefaultValueIfNotCustomized('dbUsr', 'stefan')
    setPropertyDefaultValueIfNotCustomized('dbPwd', 'ziegler12')
    setPropertyDefaultValueIfNotCustomized('dbSchema', 'test1')
    setPropertyDefaultValueIfNotCustomized('modelName', 'DM01AVSO24LV95')

    //fosnrs = [2401,2402,2403,2404,2405,2406,2407,2408,2421,2422,2423,2424,2425,2426,2427,2428,2429,2445,2455,2456,2457,2461,2463,2464,2465,2471,2472,2473,2474,2475,2476,2477,2478,2479,2480,2481,2491,2492,2493,2495,2497,2498,2499,2500,2501,2502,2503,2511,2513,2514,2516,2517,2518,2519,2520,2523,2524,2525,2526,2527,2528,2529,2530,2532,2534,2535,2541,2542,2543,2544,2545,2546,2547,2548,2549,2550,2551,2553,2554,2555,2556,2571,2572,2573,2574,2575,2576,2578,2579,2580,2581,2582,2583,2584,2585,2586,2601,2611,2612,2613,2614,2615,2616,2617,2618,2619,2620,2621,2622]
    fosnrs = [2401,2402,2403,2404,2405,2406,2407,2408]
    baseUrl = "https://geoweb.so.ch/av_datenabgabe/av_daten/itf_so/"
    downloadDir = System.getProperty("java.io.tmpdir")

    // TODO: check it's enough to use a simple method.
    config = new Config()
}

task deleteFiles(type: Delete) {
    description 'Delete files (zip, itf, ITF) in download directory.'    
    doFirst {
        println "Deleting files in: " + downloadDir
    }
    delete fileTree(downloadDir) {
        include '**/*.zip'
        include '**/*.itf'
        include '**/*.ITF'
    }
}

task initDatabase(dependsOn: 'config') {
    description 'Initialize PostgreSQL/PostGIS database schema with ili2pg.'    
    doLast {
        config.setConfigReadFromDb(true)
        config.setModels(modelName)
        Ili2db.runSchemaImport(config, "")
    }
}

task downloadFiles(dependsOn: 'config') {
    description 'Download ITF/ZIP files from geoweb.so.ch.'    
    doLast {
        fosnrs.each { fosnr ->
            def url = baseUrl + fosnr + "00.zip"
            println "Downloading: " + url
            def file = new File(downloadDir + fosnr + "00.zip").newOutputStream()  
            file << new URL(url).openStream()  
            file.close()  
        }
    }
}

task unzipFiles() {
    description 'Unzips all *.zip files in the download directory.'    
    doLast {
        def dir = new File(downloadDir) 
        dir.traverse(type: FileType.FILES, nameFilter: ~/.*\.(?i)zip$/) { file ->
            println "Unzipping: " + file
            ant.unzip(
                src:file,
                dest:dir,
                overwrite:"true"
            )
            //file.delete()
        }
    }
}

task importFiles(dependsOn: 'config') {
    description 'Imports the ITF files into a PostgreSQL/PostGIS database.'
    doLast {
        def files = []
        def dir = new File(downloadDir)
        dir.traverse(type: FileType.FILES, nameFilter: ~/^(1|2)[a-zA-Z]?.*\.(?i)itf$/) { file ->
            files << file
        }

        files.each { file ->
            println "Importing: " + file
        
            config.setConfigReadFromDb(true)
            config.setModels(Ili2db.XTF)

            def fileName = file.toString()
            def dataSet = new File(fileName).getName()[0..3]

            config.setDatasetName(dataSet)
            config.setXtffile(fileName)

            Ili2db.runUpdate(config, "", Config.FC_REPLACE)

            //file.delete()
        }
    }
}

task uploadToS3() {
    description 'Uploads the ITF files into a Amazon S3 bucket.'
    doLast {
        def files = []
        def dir = new File(downloadDir)
        dir.traverse(type: FileType.FILES, nameFilter: ~/^(1|2)[a-zA-Z]?.*\.(?i)itf$/) { file ->
            files << file
        }

        AmazonS3 s3Client = AmazonS3ClientBuilder.standard()
            .withRegion(Regions.US_EAST_1)
            //.withClientConfiguration(config)
            //.withForceGlobalBucketAccessEnabled(true)
            .build()

        for (Bucket bucket : s3Client.listBuckets()) {
            println " - " + bucket.getName()
        }

        def bucketName = "ch.so.agi.av.dm01avso24lv95.itf"

        files.each { file ->
            println "Uploading: ${file.getName()}"
            s3Client.putObject(new PutObjectRequest(bucketName, file.getName(), file)
                .withCannedAcl(CannedAccessControlList.PublicRead))
        }
    }
}

task config() {
    doLast {
        config.setModeldir(ch.interlis.ili2c.Main.ILI_REPOSITORY)
        config.setDefaultSrsAuthority("EPSG")
        config.setDefaultSrsCode("2056")
        config.setMaxSqlNameLength(Integer.toString(NameMapping.DEFAULT_NAME_LENGTH))
        config.setIdGenerator(ch.ehi.ili2db.base.TableBasedIdGen.class.getName())
        config.setInheritanceTrafo(config.INHERITANCE_TRAFO_SMART1)
        config.setValidation(false)
        config.setCreateFkIdx(config.CREATE_FKIDX_YES)
        config.setValue(SqlConfiguration.CREATE_GEOM_INDEX,"True")
        config.setSqlNull(config.SQL_NULL_ENABLE)
        config.setBasketHandling(config.BASKET_HANDLING_READWRITE)
        config.setCreateDatasetCols(config.CREATE_DATASET_COL)
        config.setTidHandling(config.TID_HANDLING_PROPERTY)
        config.setNameOptimization(config.NAME_OPTIMIZATION_TOPIC)
        config.setGeometryConverter(ch.ehi.ili2pg.converter.PostgisColumnConverter.class.getName())
        config.setDdlGenerator(ch.ehi.sqlgen.generator_impl.jdbc.GeneratorPostgresql.class.getName())
        config.setJdbcDriver("org.postgresql.Driver")
        config.setIdGenerator(ch.ehi.ili2pg.PgSequenceBasedIdGen.class.getName())
        config.setUuidDefaultValue("uuid_generate_v4()")
        config.setDbhost(dbHost)
        config.setDbdatabase(dbDatabase)
        config.setDbport(dbPort)
        config.setDbusr(dbUsr)
        config.setDbpwd(dbPwd)
        config.setDburl("jdbc:postgresql://" + dbHost + ":" + dbPort + "/" + dbDatabase)
        config.setDbschema(dbSchema)
    }
}

def setPropertyDefaultValueIfNotCustomized(propertyName, defaultValue) {
    if (!project.hasProperty(propertyName)) {
        ext[propertyName] = defaultValue
    }
}